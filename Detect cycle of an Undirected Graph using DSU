class Solution {
  public:
    
    vector<int> parent;
    vector<int> rank;
    
    int find(int x){            //Find function
      if(x == parent[x]){
        return x;
      }
      return parent[x] = find(parent[x]);
    }
    
    void Union(int x, int y){
      int par_x = find(x);
      int par_y = find(y);
    
      if(par_x == par_y) 
        return ;
    
      if(rank[par_x] > rank[par_y]){
        parent[par_y] = par_x;
      }else if(rank[par_x] < rank[par_y]){
        parent[par_x] = par_y;
      }else{
        parent[par_y] = par_x;
        rank[par_x]++;
      }
    
    }
    // Function to detect cycle using DSU in an undirected graph.
    int detectCycle(int V, vector<int> adj[]) {
        // Code here
        parent.resize(V);
        rank.resize(V, 0);
        for(int i = 0; i<V; i++){
            parent[i] = i;
        }
        for(int u = 0; u<V; u++){
            for(auto &v: adj[u]){
                if(u < v){
                    int par_u = find(u);
                    int par_v = find(v);
                    
                    if(par_u == par_v){
                        return 1;
                    }else{
                        Union(par_u, par_v);
                    }
                }
            }
        }
        return 0;
        
    }
};
