class Solution {
  public:
    void DFS(vector<vector<int>>& adj, int u, vector<bool>& visited, stack<int>& st){
        visited[u] = true;
        
        for(int &v: adj[u]){
            if(!visited[v]){
                DFS(adj, v, visited, st);
            }
        }
        st.push(u);     // Go to depth of a vertex and push the last child to the stack first, so the parent will be on top of the stack and when we pop() them from the stack we get parent 1st in the topological sort
    }
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<int>> adj(V);
        
        for(auto &edge: edges){
            int u = edge[0], v = edge[1];
            
            adj[u].push_back(v);
        }
        vector<bool> visited(V, false);
        stack<int> st;
        for(int i = 0; i<V; i++){
            if(!visited[i]){
                DFS(adj, i, visited, st);
                
            }
        }
        vector<int> res;
        while(!st.empty()){
            res.push_back(st.top());
            st.pop();
        }
        
        return res;
        
    }
};
