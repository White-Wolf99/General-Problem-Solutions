class Solution {
  public:
    void BFS(unordered_map<int, vector<int>> mp, int u, vector<int> &res, vector<bool> &vis){
        queue<int> qu;
        
        qu.push(u);
        vis[u] = true;
        res.push_back(u);
        
        while(!qu.empty()){
            int u = qu.front();
            qu.pop();
            for(auto &v: mp[u]){
                if(!vis[v]){
                    qu.push(v);
                    vis[v] = true;
                    res.push_back(v);
                   
                }
            }
        }
        
    }
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfs(vector<vector<int>> &adj) {
        // Code here
        int V = adj.size();
        
        unordered_map<int, vector<int>> mp;
        
        for(int u = 0; u<V; u++){
            for(auto v: adj[u]){
                mp[u].push_back(v);
            }
        }
        
        vector<int> res;
        
        vector<bool> vis(V, false);
        
        BFS(mp, 0, res, vis);
        return res;
        
    }
};
