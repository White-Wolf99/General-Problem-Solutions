class Solution {
  public:
    //vector<int> res;
    bool isCycleBFS(vector<vector<int>>& adj, int V, vector<int>& indeg, queue<int>& que, int cnt){
        
        while(!que.empty()){
            int u = que.front();
            que.pop();
            cnt++;
            
            //res.push_back(u);
            
            for(auto &v: adj[u]){
                indeg[v]--;
                if(indeg[v] == 0){
                    que.push(v);
                }
            }
        }
        if(cnt != V){
            return true;
        }else{
            return false;
        }
    }
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
        vector<vector<int>> adj(V);
        
        for(auto &edge: edges){
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            
        }
        vector<int> indeg(V, 0);
        for(int u = 0; u<V; u++){
            for(auto &v: adj[u]){
                indeg[v]++;
            }
        }
        queue<int> que;
    
        for(int i = 0; i<V; i++){
            if(indeg[i] == 0){
                que.push(i);
               
            }
        }
       
       
        return isCycleBFS(adj, V, indeg, que, 0);
        
        
    }
};
